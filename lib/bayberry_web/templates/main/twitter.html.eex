<link rel="stylesheet" href="<%= static_path(@conn, "/css/twitter.css") %>">

<div class='jumbotron'>
  <div class='container'>
    <div class='row justify-content-center'>
      <div class='col-xs-8 text-center'>
        <h4 class='display-4'>
          <a href='http://www.twitter.com' class='link-icon'>
            <i id='twitter-bird' class='fa fa-twitter text-danger'></i>
            <i id='twitter-no'></i>
          </a>
          Twitter Live Stream
        </h4>
      </div>
    </div>
    <div class='row justify-content-center'>
      <p class='lead text-center'>
        This is a live stream of tweets, with a live forecast of their volume.
      </p>
    </div>

    <div class='row justify-content-center'>
      <p class='text-center col-sm-6 caution'>
        <strong class='text-warning'>
          <i class='fa fa-balance-scale'></i>
          DISCLAIMER:
        </strong>
        Opinions expressed in any tweets shown here
        belong solely to their authors.
        They do not represent mine. I don't even tweet.
      </p>
    </div>

    <hr/>

    <div class='row justify-content-center'>
      <div id="tweets" class="chart"></div>
    </div>

    <hr/>

    <div class='row justify-content-center'>
      <p class='text-center col-sm-6 caution'>
        <strong class='text-danger'><i class='fa fa-warning'></i> WARNING:</strong>
        These tweets are <strong>NOT</strong> filtered.
        Sometimes Twitter isn't nice <i class='fa fa-meh-o'></i>
      </p>
    </div>

    <hr/>

    <div class='row justify-content-center'>
      <%= for i <- [0, 1] do %>
        <div class='col-xs-8 col-sm-6'>
          <%= for j <- [0, 1] do %>
          <div class="card">
            <div class="card-block">
              <p class="card-text tweet">
                <span id="tweet-<%= 2 * i + j %>">...</span>
              </p>
            </div>
          </div>
          <% end %>
        </div>
      <% end %>
    </div>

  </div>
</div>

<div class='container'>
  <div class='col-xs-8 offset-xs-2'>
    <h4 class='display-4'>What am I looking at?</h4>
    <p>
      This is a live stream from <a href='http://www.twitter.com'>Twitter</a>.
      It is a small sample of the total number of tweets. About 5,000
      tweets are posted every second, which adds up to nearly 200 billion each
      year. The stream here is further filtered by keyword, containing all tweets
      from, in reply to, or retweeting a particular keyword, such as a hashstag.
      This particular filter was chosen solely to ensure a steady tweet stream.
      A live forecast of the minutewise stream volume is shown above the tweets;
      the dotted portions of the observed and forecast values indicate the
      current minute. As more tweets come in, the observed tweet volume for the
      current minute is updated.
    </p>

    <h4 class='display-4'>What is it good for?</h4>
    <p>
      The Web is entering its third major paradigm.
      <a href='https://www.techopedia.com/definition/27960/web-10'>Web 1.0</a>
      consisted of static
      articles distributed via a simple request-response protocol.
      <a href='https://en.wikipedia.org/wiki/Web_2.0'>Web 2.0</a> technology,
      exemplified by Ruby on Rails, is focused on dynamic content, though still
      distributed primarily by round-trip calls from a browser to a server.
      The nascent version
      <a href='http://www.uxbooth.com/articles/web-2-0-web-3-0-and-the-internet-of-things/'>3.0</a>
      of the Web is characterized by real-time streaming dynamic data. In this
      streaming paradigm, data is not periodically requested by the user,
      but <em>pushed</em> to the user, via technologies like websockets. This
      paradigm is well-suited for the
      <a href='https://en.wikipedia.org/wiki/Internet_of_things'>Internet of Things</a>,
      where data must be transferred rapidly between many connected devices,
      not just a server and browser.
    </p>

    <h4 class='display-4'>What is it made with?</h4>
    <p>
      This component of the site uses a Haskell microservice to consume a stream
      of tweets from Twitter. A Redis key-value store keeps the recent observed
      tweet volume, while a RabbitMQ message queue delivers the tweet stream to
      the main application.
    </p>

    <h4 class='display-4'>How does it work?</h4>
    <p>
      The data displayed here is consumed from the Twitter streaming
      <a href='https://dev.twitter.com/streaming/overview'>API</a>
      by a Haskell worker process. The stream is partitioned into individual
      tweets, which are encoded as JSON and passed into RabbitMQ. As each tweet
      is passed to RabbitMQ, a tally of recent tweets is updated in Redis. The
      main application subscribes to the RabbitMQ message queue, and forwards
      the tweets from there to a visitor's browser over a websocket. The Twitter
      bird icon on the main page responds to the volume of streaming tweets with
      a halo proportional in size to the rate of tweets per second; a popup
      displays this rate when the mouse cursor is hovered over it.

      The Haskell service exposes a JSON API endpoint, which the main website
      periodically queries. On each query, the Haskell service retrieves the
      tally of observed tweets from Redis, and runs a time series forecast,
      which is returned to the main application via the endpoint. This forecast
      is sent to the browser via websocket, and displayed on the graph using
      D3.js. The graph updates the number of observed tweets for the current
      minute.
    </p>

  </div>
</div>

<script src="<%= static_path(@conn, "/js/twitter.js") %>"></script>
