<link rel="stylesheet" href="<%= static_path(@conn, "/css/twitter.css") %>">

<div class='jumbotron'>
  <div class='container'>
    <div class='row justify-content-center'>
      <div class='col-xs-8 text-center'>
        <h4 class='display-4'>
          <a href='http://www.twitter.com' class='link-icon'>
            <i id='twitter-bird' class='fa fa-twitter text-danger'></i>
            <i id='twitter-no'></i>
          </a>
          Twitter Live Stream
        </h4>
      </div>
    </div>
    <div class='row justify-content-center'>
      <p class='lead text-center'>
        This is a live stream of tweets, and a live forecast of their volume.
      </p>
    </div>

    <div class='row justify-content-center'>
      <p class='text-center col-sm-6 caution'>
        <strong class='text-warning'>
          <i class='fa fa-balance-scale'></i>
          DISCLAIMER:
        </strong>
        Opinions expressed in any tweets shown here
        belong solely to their authors.
        They do not represent mine. I don't even tweet.
      </p>
    </div>

    <hr/>

    <div class='row justify-content-center'>
      <div id="tweets" class="chart"></div>
    </div>

    <hr/>

    <div class='row justify-content-center'>
      <p class='text-center col-sm-6 caution'>
        <strong class='text-danger'><i class='fa fa-warning'></i> WARNING:</strong>
        These tweets are <strong>NOT</strong> filtered.
        Sometimes Twitter isn't nice <i class='fa fa-meh-o'></i>
      </p>
    </div>

    <hr/>

    <div class='row justify-content-center'>
      <%= for i <- [0, 1] do %>
        <div class='col-xs-8 col-sm-6'>
          <%= for j <- [0, 1] do %>
          <div class="card">
            <div class="card-block">
              <p class="card-text tweet">
                <span id="tweet-<%= 2 * i + j %>">...</span>
              </p>
            </div>
          </div>
          <% end %>
        </div>
      <% end %>
    </div>

  </div>
</div>

<div class='container'>
  <div class='col-xs-8 offset-xs-2'>
    <h4 class='display-4'>What am I looking at?</h4>
    <p>
      This is a live stream from <a href='http://www.twitter.com'>Twitter</a>.
      It is a small sample of the total number of tweets. About 5,000
      tweets are posted every second, which adds up to nearly 200 billion each
      year. The stream here is further filtered by user, containing all tweets
      from, in reply to, or retweeting a particular collection of users.
      This particular filter was chosen solely to ensure a steady tweet stream.
      A live forecast of the minutewise stream volume is shown above the tweets;
      the dotted portions of the observed and forecast values indicate the
      current minute. As more tweets come in, the observed tweet volume for the
      current minute is updated.
    </p>

    <h4 class='display-4'>What is it good for?</h4>
    <p>
      The Web is entering its third major paradigm.
      <a href='https://www.techopedia.com/definition/27960/web-10'>Web 1.0</a>
      consisted of static
      articles distributed via a simple request-response protocol.
      <a href='https://en.wikipedia.org/wiki/Web_2.0'>Web 2.0</a> technology,
      exemplified by Ruby on Rails, is focused on dynamic content, though still
      distributed primarily by round-trip calls from a browser to a server.
      The nascent version
      <a href='http://www.uxbooth.com/articles/web-2-0-web-3-0-and-the-internet-of-things/'>3.0</a>
      of the Web is characterized by real-time streaming dynamic data. In this
      streaming paradigm, data is not periodically requested by the user,
      but <em>pushed</em> to the user, via technologies like websockets. This
      paradigm is well-suited for the
      <a href='https://en.wikipedia.org/wiki/Internet_of_things'>Internet of Things</a>,
      where data must be transferred rapidly between many connected devices,
      not just a server and browser.
    </p>

    <h4 class='display-4'>What is it made with?</h4>
    <p>
      This component of the site uses the main Phoenix compontent application to
      consume a stream of tweets from Twitter, and shunt them into a RabbitMQ
      message queue for distribution to Redis for tallying. A small application
      written in Haskell queries Redis and runs a forecast of the tweet volume
      for the next upcoming minute.
    </p>

    <h4 class='display-4'>How does it work?</h4>
    <p>
      The data displayed here is consumed from the Twitter streaming
      <a href='https://dev.twitter.com/streaming/overview'>API</a>
      by an Elixir worker process. The stream is partitioned into individual
      tweets, which are encoded as JSON and passed into RabbitMQ. Another
      Elixir process retrieves the tweets from the message queue and broadcasts
      them over a websocket channel. On the client side, a bit of JavaScript
      connects to the websocket, subscribes to the channel, and updates the
      article as the tweets are streamed to the browser. Similar to the handwritten
      digit recognition article, the Twitter bird icon turns red if the websocket
      is not connected. The Elixir worker also notifies a Redis transient data
      store of each incoming tweet; Redis keeps a minute-by-minute tally of
      recent tweets. As tweets are received over the websocket, an Elixir worker
      calls the Haskell application, which runs a time series forecast based
      on exponential smoothing, and returns the forecast in JSON form, to be
      plotted on the forecast chart by D3.js.
    </p>

  </div>
</div>

<script src="<%= static_path(@conn, "/js/twitter.js") %>"></script>
